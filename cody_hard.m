%% BECKHAM
% From Wikipedia
% http://en.wikipedia.org/wiki/File:Paint_by_numbers_Animation.gif

horz = { ...
    3, 5, [3 1], [2 1], [3 3 4], ...
    [2 2 7], [6 1 1], [4 2 2], [1 1], [3 1], ...
    6, [2 7], [6 3 1], [1 2 2 1 1], [4 1 1 3], ...
    [4 2 2], [3 3 1], [3 3], 3, [2 1] };

vert = { ...
    2, [1 2], [2 3], [2 3], [3 1 1], ...
    [2 1 1], [1 1 1 2 2], [1 1 3 1 3], [2 6 4], [3 3 9 1], ...
    [5 3 2], [3 1 2 2], [2 1 7], [3 3 2], [2 4], ...
    [2 1 2], [2 2 1], [2 2], 1, 1 };

getseq = @(soluce) arrayfun( @(i)cellfun( 'length', regexp( char(soluce(i,:)+'0'), '1+', 'match' ) ), 1:size(soluce,1), 'Uniformoutput', false );
equalseq = @(actual,expected) length(actual) == length(expected) && all( cellfun( @(a,e)length(a) == length(e) && all( a == e ), actual, expected ) );
checksoluce = @( soluce, horz, vert ) size(soluce,1) == length(horz) && size(soluce,2) == length(vert) && equalseq( getseq( soluce ), horz ) && equalseq( getseq( soluce' ), vert );
assert( checksoluce( solvePicross( horz, vert ), horz, vert ) )

%% GOT MILK?
% By John Breckenridge (jbrecken)
% http://webpbn.com/index.cgi?id=8169

horz = { ...
    [5, 10, 6], [5, 8, 6], [5, 1, 6, 6], [5, 2, 4, 1, 6], [5, 3, 2, 3, 6], ...
    [4, 4, 6], [2, 6], [1, 3, 5], [2, 1, 3, 5], [5, 2, 1, 4], ...
    [1, 1, 2, 5, 4], [2, 1, 2, 5], [2, 3, 6], [3, 1, 1, 7], [4, 2, 8], ...
    [5, 3, 4], [18, 2], [5, 1, 4, 1], [3, 3, 4, 1], [2, 1, 3, 1, 3], ...
    [2, 1, 1, 1, 1, 2], [2, 1, 1, 1, 1], [2, 2, 2, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 3, 1] };

vert = { ...
    [8, 15], [7, 12], [6, 6, 2], [6, 2, 4], [5, 2, 3, 2], ...
    [4, 1, 4], [3, 1, 2, 1, 3], [1, 2, 3, 1], [2, 1, 1, 1, 2], [3, 2, 5], ...
    [4, 1, 1, 1, 2], [5, 1, 1], [5, 2, 1, 1], [4, 2, 1, 3], [3, 1, 4, 1, 4], ...
    [2, 2, 1, 2, 2, 2], [1, 2, 3, 3], [3, 4, 2], [3, 2, 2], [7, 3, 2, 3], ...
    [9, 4, 2, 2], [16, 3, 1], [16, 3], 17, [19, 1] };

getseq = @(soluce) arrayfun( @(i)cellfun( 'length', regexp( char(soluce(i,:)+'0'), '1+', 'match' ) ), 1:size(soluce,1), 'Uniformoutput', false );
equalseq = @(actual,expected) length(actual) == length(expected) && all( cellfun( @(a,e)length(a) == length(e) && all( a == e ), actual, expected ) );
checksoluce = @( soluce, horz, vert ) size(soluce,1) == length(horz) && size(soluce,2) == length(vert) && equalseq( getseq( soluce ), horz ) && equalseq( getseq( soluce' ), vert );
assert( checksoluce( solvePicross( horz, vert ), horz, vert ) )

%% WHERE THERE'S SMOKE
% By Marcus (aanet)
% http://webpbn.com/index.cgi?id=2413

horz = { ...
    [1, 3, 2, 1], [1, 2, 2], [3, 4], [2, 3, 2], [2, 1, 6], ...
    [2, 13, 1], [1, 1, 8], [2, 1, 1, 7], [1, 2, 2, 2, 3], [3, 1, 1, 1, 3], ...
    [1, 2, 1, 1, 3], [2, 1, 1, 3], [1, 5, 5], [1, 1, 3], [4, 2], ...
    [2, 2, 1, 2, 1], [2, 1, 2, 3, 2], [4, 1, 6, 1], [3, 4, 3, 2], [4, 2] };

vert = { ...
    [2, 2, 1], [1, 6, 4, 4], [3, 3, 1, 1, 4], [2, 2], [1, 3, 3, 3], ...
    [1, 1, 1, 2, 1, 2], [2, 1, 1, 1, 1], [2, 4, 3, 3], [3, 1, 2, 3, 1], [1, 4, 2, 1], ...
    [3, 1, 2], [2, 1, 1], [3, 3], [7, 4], [5, 4], ...
    [3, 2, 1, 3], [3, 4, 1], [9, 2], [8, 3], [1, 8, 2] };

getseq = @(soluce) arrayfun( @(i)cellfun( 'length', regexp( char(soluce(i,:)+'0'), '1+', 'match' ) ), 1:size(soluce,1), 'Uniformoutput', false );
equalseq = @(actual,expected) length(actual) == length(expected) && all( cellfun( @(a,e)length(a) == length(e) && all( a == e ), actual, expected ) );
checksoluce = @( soluce, horz, vert ) size(soluce,1) == length(horz) && size(soluce,2) == length(vert) && equalseq( getseq( soluce ), horz ) && equalseq( getseq( soluce' ), vert );
assert( checksoluce( solvePicross( horz, vert ), horz, vert ) )

%% IMMORTAL STAR

horz = { ...
    75, [55, 17], [13, 31, 12], [11, 27, 10], [9, 25, 8], ...
    [7, 23, 7], [6, 21, 6], [5, 20, 4], [4, 18, 3], [3, 18, 2], ...
    [2, 18, 2], [1, 18, 1], [1, 18, 1], [18, 1], 18, ...
    [3, 3, 1], [2, 1], [2, 4, 1], [8, 8, 1], [1, 10, 10, 2], ...
    [1, 11, 12, 2], [2, 13, 13, 3], [3, 29, 4], [4, 29, 6], [5, 29, 1, 7], ...
    [7, 1, 30, 18], [18, 11, 7, 11, 18], [17, 10, 5, 10, 17], [17, 9, 4, 9, 16], [16, 9, 3, 9, 16], ...
    [16, 8, 3, 8, 16], [16, 8, 3, 8, 15], [16, 8, 3, 8, 15], [15, 8, 3, 8, 15], [15, 7, 3, 7, 3, 15], ...
    [15, 5, 8, 3, 14, 15], [15, 15, 4, 15, 15], [15, 38, 3, 15], [15, 2, 14, 14, 3, 15], [15, 3, 13, 12, 4, 15], ...
    [16, 16, 12, 4, 15], [16, 4, 11, 11, 4, 15], [16, 5, 10, 10, 5, 16], [16, 4, 10, 10, 5, 16], [17, 5, 13, 12, 5, 16], ...
    [18, 5, 23, 5, 17], [18, 5, 21, 5, 17], [19, 5, 17, 5, 18], [20, 5, 12, 5, 19], [20, 5, 4, 5, 20], ...
    [21, 5, 4, 21], [22, 5, 4, 22], [23, 5, 3, 23], [24, 3, 3, 24], [26, 3, 2, 26], ...
    [28, 2, 2, 27], [29, 3, 3, 29], [31, 10, 30], [32, 6, 31], [35, 33] };

vert = { ...
    [13, 41], [11, 39], [10, 38], [9, 37], [8, 36], ...
    [7, 35], [6, 35], [5, 34], [5, 34], [4, 34], ...
    [4, 34], [3, 34], [3, 34], [2, 34], [2, 34], ...
    [2, 7, 20], [2, 3, 16], [2, 2, 7, 15], [2, 10, 13], [2, 3, 8, 12], ...
    [2, 3, 8, 10], [3, 6, 8, 9], [3, 5, 7, 7, 8], [4, 12, 7, 7, 7], [5, 23, 6, 6], ...
    [6, 25, 5, 6], [7, 27, 4, 5], [8, 1, 29, 3, 5], [17, 29, 3, 4], [16, 30, 1, 3], ...
    [16, 31, 2, 3], [15, 11, 14, 2, 2], [15, 9, 12, 1, 1], [15, 8, 3, 6, 2, 1], [15, 9, 2, 5, 1, 1], ...
    [15, 10, 1, 6, 2], [15, 17, 6, 2], [15, 16, 6, 2], [15, 18, 5, 2], [15, 9, 2, 5, 2], ...
    [15, 9, 1, 5, 2], [15, 8, 2, 6, 1], [15, 10, 12, 2, 1], [15, 11, 12, 1, 1], [16, 31, 2, 2], ...
    [16, 31, 2, 3], [8, 1, 29, 2, 4], [6, 29, 2, 4], [5, 27, 3, 5], [4, 25, 4, 6], ...
    [3, 24, 4, 6], [3, 12, 8, 6, 7], [2, 4, 7, 7, 8], [2, 7, 8, 9], [2, 5, 8, 10], ...
    [1, 3, 9, 11], [1, 1, 11, 12], [1, 2, 9, 13], [2, 3, 4, 15], [2, 6, 18], ...
    [2, 35], [2, 35], [2, 35], [3, 35], [3, 35], ...
    [4, 35], [4, 35], [5, 35], [6, 36], [7, 37], ...
    [7, 37], [8, 38], [9, 39], [11, 41], [14, 45] };

getseq = @(soluce) arrayfun( @(i)cellfun( 'length', regexp( char(soluce(i,:)+'0'), '1+', 'match' ) ), 1:size(soluce,1), 'Uniformoutput', false );
equalseq = @(actual,expected) length(actual) == length(expected) && all( cellfun( @(a,e)length(a) == length(e) && all( a == e ), actual, expected ) );
checksoluce = @( soluce, horz, vert ) size(soluce,1) == length(horz) && size(soluce,2) == length(vert) && equalseq( getseq( soluce ), horz ) && equalseq( getseq( soluce' ), vert );
assert( checksoluce( solvePicross( horz, vert ), horz, vert ) )
